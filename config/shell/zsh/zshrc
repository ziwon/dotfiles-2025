# Modern Zsh Configuration (2025) 
# ================================
# Local BIN
export PATH="$HOME/.local/bin:$PATH"

# Performance monitoring (optional - remove in production)
# zmodload zsh/zprof
# Zinit installation and setup
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
source "${ZINIT_HOME}/zinit.zsh"
# Load annexes
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# ================================
# COMPLETION SYSTEM INITIALIZATION 
# ================================
# Load completion module and initialize completion system
zmodload zsh/complist
autoload -Uz compinit
# Speed up compinit by checking once a day
if [[ -n ${ZDOTDIR:-$HOME}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# ================================
# Zsh Configuration Options
# ================================
# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

# Directory options
unsetopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT

# Completion options 
setopt COMPLETE_ALIASES
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END
setopt AUTO_MENU
setopt AUTO_LIST
setopt auto_param_slash      # Add trailing slash to directory completions
setopt no_case_glob          # Case-insensitive globbing
setopt no_case_match         # Case-insensitive matching
setopt globdots              # Include dotfiles in globbing
setopt extended_glob         # Use extended globbing syntax

# Other useful options
unsetopt CORRECT             # Disable slow spell conrrection for path
unsetopt CORRECT_ALL
setopt INTERACTIVE_COMMENTS
setopt MULTIOS
setopt NO_BEEP

# ================================
# Completion Styling 
# ================================
FPATH="$HOME/.docker/completions:$FPATH"

# Use the guarded preview for cd
zstyle ':fzf-tab:complete:*:*' fzf-preview '
  emulate -L zsh -o no_aliases
  setopt LOCAL_OPTIONS EXTENDED_GLOB NULL_GLOB GLOB_DOTS

  local p=${realpath:-$word}

  # Directory preview — pure zsh (no ls/wc/tr)
  if [[ -d $p ]]; then
    local -a entries
    entries=("$p"/*(D))             # include dotfiles; NULL_GLOB avoids errors
    local count=${#entries}

    if (( count < 500 )); then
      for f in $entries; do
        print -r -- ${f:t}          # basename
      done
    else
      printf "[preview skipped: %d entries]\n" "$count"
    fi
    return
  fi

  # File preview — bat → batcat → cat → head
  if [[ -f $p ]]; then
    if command -v bat >/dev/null 2>&1; then
      bat --style=plain --color=always -- "$p"
    elif command -v batcat >/dev/null 2>&1; then
      batcat --style=plain --color=always -- "$p"
    elif command -v cat >/dev/null 2>&1; then
      cat -- "$p"
    else
      head -n 200 -- "$p" 2>/dev/null || true
    fi
    return
  fi

  # Non-file/dir candidates
  print -r -- "$p"
'

# Global fzf UI flags for fzf-tab (right-side preview)
zstyle ':fzf-tab:*' fzf-flags --border --height=60% --layout=reverse --preview-window=right,60%,wrap --bind='?:toggle-preview' --info=inline

# git-specific previews 
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview 'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*'   fzf-preview 'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*'  fzf-preview 'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*'  fzf-preview 'case "$group" in "commit tag") git show --color=always $word ;; *) git show --color=always $word | delta ;; esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview 'case "$group" in "modified file") git diff $word | delta ;; "recent commit object name") git show --color=always $word | delta ;; *) git log --color=always $word ;; esac'
zstyle ':completion:*:git-checkout:*' sort false

# Completion visuals
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:*' switch-group '<' '>'

# Keep list size sane
zstyle ':completion:*' list-max-items 20

# ================================
# Virtual Environment Configuration
# ================================
# Set VIRTUAL_ENV_DISABLE_PROMPT to prevent default (venv) prefix
export VIRTUAL_ENV_DISABLE_PROMPT=1
# Modern virtualenv prompt function
function virtualenv_prompt_info() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        local venv_name=$(basename "$VIRTUAL_ENV")
        echo "%F{cyan}(%F{yellow}${venv_name}%F{cyan})%f "
    fi
}

# ================================
# Theme and Prompt
# ================================
# Check if Oh My Posh theme supports Python or use fallback

# Activate the brew shell before invoking oh-my-posh
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
if [[ -n "$POSH_PICK_THEME" ]] && [[ -f "$POSH_PICK_THEME" ]]; then
    # Use Oh My Posh with custom theme
    eval "$(oh-my-posh init zsh --config "$POSH_PICK_THEME")"
fi

# ================================
# Core Plugins (LOADED AFTER COMPLETION INIT)
# ================================
# Completions
zinit light zsh-users/zsh-completions
# History substring search
zinit light zsh-users/zsh-history-substring-search
# Auto-close quotes and brackets
zinit light hlissner/zsh-autopair

# ================================
# fzf Setup (using system fzf)
# ================================
# Source system fzf key bindings and completion
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

# Custom fzf configuration
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
# fzf colors (catppuccin theme)
export FZF_DEFAULT_OPTS="
    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8
    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6ac,pointer:#f5e0dc
    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6ac,hl+:#f38ba8
    --height 60% --layout=reverse --border --margin=1 --padding=1"

# ================================
# Syntax Highlighting (LOADED AFTER fzf)
# ================================
# Syntax highlighting (must be loaded after fzf and autosuggestions)
zinit light zdharma-continuum/fast-syntax-highlighting
# Autosuggestions (load after syntax highlighting)
zinit light zsh-users/zsh-autosuggestions

# ================================
# Productivity Plugins (LOADED LAST)
# ================================
# Directory jumping
zinit light agkozak/zsh-z
# Git aliases and functions
zinit light unixorn/git-extra-commands
# Better cd command
# zinit light b4b4r07/enhancd
# Command line fuzzy finder integration (load after fzf setup)
zinit light Aloxaf/fzf-tab

# Colored man pages
zinit light ael-code/zsh-colored-man-pages
# Docker completion and helpers
# zinit light docker/cli contrib/completion/zsh
# Kubernetes helpers
zinit light bonnefoa/kubectl-fzf
# Python virtual environment management
zinit light MichaelAquilina/zsh-autoswitch-virtualenv

# ================================
# Development Tools Integration
# ================================
# mise (tool version management)
if command -v mise &> /dev/null; then
    eval "$(mise activate zsh)"
fi
# zoxide (smarter cd)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi
# thefuck (command correction)
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# ================================
# Key Bindings (SET AFTER fzf LOAD)
# ================================
# Emacs-style key bindings
bindkey -e
# History search
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
# fzf key bindings (only if widgets exist)
if [[ -n "${widgets[fzf-history-widget]}" ]]; then
    bindkey '^R' fzf-history-widget
fi
if [[ -n "${widgets[fzf-file-widget]}" ]]; then
    bindkey '^T' fzf-file-widget
fi
if [[ -n "${widgets[fzf-cd-widget]}" ]]; then
    bindkey '^[c' fzf-cd-widget
fi

# ================================
# Environment Variables
# ================================
# Editor
export EDITOR="nvim"
export VISUAL="nvim"
# Pager
export PAGER="less"
export LESS="-R"
# Colors
export CLICOLOR=1
export LS_COLORS="$(vivid generate catppuccin-mocha 2>/dev/null || dircolors -b)"
export POWERLEVEL9K_INSTANT_PROMPT=quiet
# Language
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
# Development
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1
export NODE_OPTIONS="--max-old-space-size=4096"
# Cuda
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
# ETC
export GPG_TTY=$(tty)  
export GPG_AGENT_INFO=""

# ================================
# Aliases
# ================================
# Modern replacements
if command -v eza &> /dev/null; then
    alias ls='eza --color=auto --group-directories-first'
    alias ll='eza -la --color=auto --group-directories-first'
    alias la='eza -a --color=auto --group-directories-first'
    alias lt='eza -T --color=auto --group-directories-first'
fi
if command -v batcat &> /dev/null; then
    alias cat='batcat --style=plain'
elif command -v bat &> /dev/null; then
    alias cat='bat --style=plain'
fi
if command -v rg &> /dev/null; then
    alias grep='rg'
fi
if command -v fd &> /dev/null; then
    alias find='fd'
fi
# Git aliases
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit'
alias gcm='git commit -m'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gd='git diff'
alias gl='git log --oneline --graph --decorate'
alias gp='git push'
alias gpl='git pull'
alias gs='git status'
alias gst='git stash'
alias gwip='git add -A && git commit -m "WIP"'
# Docker aliases
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias dpa='docker ps -a'
alias di='docker images'
alias drm='docker rm $(docker ps -aq)'
alias drmi='docker rmi $(docker images -q)'
# Kubernetes aliases
alias k='kubectl'
alias kg='kubectl get'
alias kd='kubectl describe'
alias ka='kubectl apply'
alias kdel='kubectl delete'
# Development aliases
alias py='python3'
alias ipy='ipython'
alias jl='jupyter lab'
alias serve='python3 -m http.server'
# Python3 aliases
alias python=python3
alias pip=pip3
## Vim
alias vim='nvim'
alias vi='nvim'
alias v='nvim'
# System aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'
# Utility aliases
alias h='history'
alias c='clear'
alias e='exit'
alias reload='source ~/.zshrc'
alias zshconfig='nvim ~/.zshrc'

# Modern system monitoring
if command -v btop &> /dev/null; then
    alias top='btop'
    alias htop='btop'
fi
alias df='df -h'
alias du='du -h'
alias free='free -h'
# Network
alias ping='ping -c 5'
alias ports='netstat -tulanp'
alias wl-copy="clip.exe"
alias wl-paste="powershell.exe -command \"Get-Clipboard\""
# Safety nets
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# copy lilke macos
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

alias docker=podman
alias docker-compose=podman-compose

# ================================
# Load Additional Configurations
# ================================
# Load custom functions
[ -f ~/.config/zsh/functions.zsh ] && source ~/.config/zsh/functions.zsh
# Load tmux integration
# [ -f ~/.config/zsh/tmux.zsh ] && source ~/.config/zsh/tmux.zsh
# Load machine-specific configuration
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
# Load work-specific configuration
[ -f ~/.zshrc.work ] && source ~/.zshrc.work
# WSL2 specific configuration
if grep -q "microsoft" /proc/version 2>/dev/null; then
    # WSL2 specific aliases and functions
    alias open='explorer.exe'
    alias pbcopy='clip.exe'
    alias pbpaste='powershell.exe -command "Get-Clipboard" | head -n -1'
fi

# ================================
# Performance Monitoring
# ================================
# Uncomment to profile zsh startup time
# zprof

# Added by LM Studio CLI (lms)
export PATH="$PATH:/home/aaron/.lmstudio/lisbin"
# End of LM Studio CLI section